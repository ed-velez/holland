## Global settings for the mariadb-dump provider - Requires holland-mariadb-dump.
##
## Unless overwritten, all backup-sets implementing this provider will use
## the following settings.

[mariadb-dump]

## This option controls whether mariadb-dump will only read options as set by
## holland or if additional options from global config files are read. By
## default, the plugin only uses options as set in the backupset config and
## includes authentication credentials only from the [client] section in
## ~/.my.cnf.
extra-defaults      = no

## Override the path where we can find mariadb command line utilities.
executable       = "mariadb-dump"

## One of: flush-lock, lock-tables, single-transaction, auto-detect, none.
##
## flush-lock will place a global lock on all tables involved in the backup
## regardless of whether or not they are in the backup-set. If
## file-per-database is enabled, then flush-lock will lock all tables
## for every database being backed up. In other words, this option may not
## make much sense when using file-per-database.
##
## lock-tables will lock all tables involved in the backup. If
## file-per-database is enabled, then lock-tables will only lock all the
## tables associated with that database.
##
## single-transaction will force running a backup within a transaction.
## This allows backing up of transactional tables without imposing a lock
## however will NOT properly backup non-transactional tables.
##
## Auto-detect will choose single-transaction unless Holland finds
## non-transactional tables in the backup-set.
##
## None will completely disable locking. This is generally only viable
## on a MariaDB slave and only after traffic has been diverted, or slave
## services suspended.
lock-method         = auto-detect

## List of comma-delimited glob patterns for matching databases.
## Only databases matching these patterns will be backed up.
## default: include everything.
#databases           = "*"

## List of comma-delimited glob patterns to exclude particular databases.
#exclude-databases   =

## List of comma-delimited tables to include.
#tables              = "*"

## List of comma-delimited tables to exclude.
#exclude-tables      = ""

## List of comma-delimited glob patterns for matching table engines.
## Only tables matching these patterns will be backed up.
## default: include everything.
#engines             = "*"

## List of comma-delimited glob patterns to exclude particular table engines.
#exclude-engines     =

## Whether to automate exclusion of invalid views that would otherwise cause
## mariadb-dump to fail. This adds additional overhead so this option is not
## enabled by default.
exclude-invalid-views = no

## Whether to run FLUSH LOGS in MariaDB with the backup. When FLUSH
## LOGS is actually executed depends on which if database filtering is being
## used and whether or not file-per-database is enabled. Generally speaking,
## it does not make sense to use flush-logs with file-per-database since the
## binary logs will not be consistent with the backup.
flush-logs			= no

## Whether to emit a FLUSH PRIVILEGES statement after dumping the mysql database.
## This ensures a proper restore when a dump contains the mysql database.
flush-privileges    = yes

## Whether to dump routines explicitly.
## (routines are implicitly included in the mariadb database)
dump-routines       = yes

## Whether to dump events explicitly.
dump-events			= no

## Whether to dump history explicitly.
## Requires MariaDB 10.11.0 or later.
dump-history		= no

## Whether to dump tables in the order of their size, smaller first.
## Requires MariaDB 10.9.1 or later.
order-by-size		= no

## Whether to stop the slave before commencing with the backup.
stop-slave          = no

## Whether to record the binary log name and position at the time of the backup.
bin-log-position    = no

## Maximum packet length to send/receive from the server.
max-allowed-packet  = 128M

## Whether to run a separate 'mariadb-dump' for each database. Note that while
## this may initially sound like a good idea, it is far simpler to backup
## all databases in one file, although that makes the restore process
## more difficult when only certain data needs to be restored.
file-per-database   = yes

## The args-per-database option is only used if file-per-database is enabled.
## It takes a JSON string in the format {"table1": "--arg", "table2": "--arg"}.
# arg-per-database    = {}

## Any additional options to pass to the 'mariadb-dump' command-line utility.
## These should show up exactly as they are on the command line.
## e.g.: --flush-privileges --reset-master.
additional-options  = ""

## Compression Settings
[compression]

## Compression method: gzip, gzip-rsyncable, bzip2, pbzip2, or lzop.
## Which compression method to use, which can be either gzip, bzip2, or lzop.
## Note that lzop is not often installed by default on many Linux
## distributions and may need to be installed separately.
method              = gzip

## Whether to compress data as it is provided from 'mariadb-dump', or to
## compress after a dump has finished. In general, it is often better to use
## inline compression. The overhead, particularly when using a lower
## compression level, is often minimal since the entire process is often I/O
## bound (as opposed to being CPU bound).
inline              = yes

## What compression level to use. Lower numbers mean faster compression,
## though also generally a worse compression ratio. Generally, levels 1-3
## are considered fairly fast and still offer good compression for textual
## data. Levels above 7 can often cause a larger impact on the system due to
## needing much more CPU resources. Setting the level to 0 effectively
## disables compression.
level               = 1

## MariaDB connection settings. Note that Holland will try to read from
## the provided files defined in the 'defaults-extra-file', although
## explicitly defining the connection information here will take precedence.
[mysql:client]

defaults-extra-file  = /root/.my.cnf,~/.my.cnf,
#user                = hollandbackup
#password            = "hollandpw"
#socket              = /tmp/mysqld.sock
#host                = localhost
#port                = 3306
